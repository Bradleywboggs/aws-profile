#! /usr/bin/env stack 
--stack --resolver lts-12.21 script --package ini --package directory --package text --package unordered-containers --package directory --package ansi-terminal

{-# LANGUAGE OverloadedStrings #-}

import System.Environment (getArgs, lookupEnv)
import Data.Ini
import Data.Text
import Data.HashMap.Strict
import System.Directory
import qualified Data.List as L
import System.Console.ANSI
import Control.Exception

-- data AwsProfileIniComment = Initialized | CurrentProfile String

-- instance Show AwsProfileIniComment where
--     show Initialized = "generated by aws-profile"
--     show CurrentProfile str = show ("current profile: ", str)



-- parseComment :: String -> Maybe AwsProfileIniComment
-- parseComment str 
--     | str == "generated by aws-profile" = Just Initialized
--     | "current profile:" `elem` str     = Just CurrentProfile
--     | otherwise                        = Nothing


data Command = Init | Set deriving Show
maybeSinkFilePath :: IO (Maybe FilePath)
maybeSinkFilePath = lookupEnv "AWS_CREDENTIALS"

maybeSourceFilePath :: IO (Maybe FilePath)
maybeSourceFilePath = lookupEnv "AWS_ALL_CREDENTIALS"

awsAccessKeyId :: Text
awsAccessKeyId = "aws_access_key_id"

awsSecretAccessKey :: Text
awsSecretAccessKey = "aws_secret_access_key"

envVarAndFileRequirements :: String
envVarAndFileRequirements = "You must set the following environment variables:\n" ++
                                        "AWS_CREDENTIALS=/Users/{username}/.aws/credentials\n" ++
                                        "AWS_ALL_CREDENTIALS={path/to/file/of/your/choice}\n\n" ++
                                        "WARNING! Be sure to put all your existing credentials in the AWS_ALL_CREDENTIALS file "++
                                        "before overwriting the standard one using this application!"
type Comment = String

currentProfileComment :: Text -> Comment
currentProfileComment profile = ";current profile: " ++ unpack profile ++ "\n\n"

type InvalidProfileError = String

invalidProfileErr :: [String] -> InvalidProfileError
invalidProfileErr validProfiles = "You must include a valid profile name. Your available AWS profiles are: " ++ show validProfiles

getEitherProfileArg :: [String] -> Ini -> IO (Either InvalidProfileError Text)
getEitherProfileArg args ini = do
    let validProfiles = fmap unpack (sections ini)
    case args of
        [] -> return $ Left $ invalidProfileErr validProfiles
        x:_ -> if x `elem` validProfiles then return $ Right (pack x) else return $ Left $ invalidProfileErr validProfiles

catchExc :: IOException -> IO String
catchExc _ = return []

isInitialized :: FilePath -> IO Bool
isInitialized sourceFile = do
    file <- catch (readFile sourceFile) catchExc
    case file of 
        [] -> return False
        fileData -> if (L.head . L.lines) fileData == ";generated by aws-profile" then return True else return False

initAwsProfile :: IO ()
initAwsProfile =  do
    awsMasterCredsFile <- maybeSourceFilePath
    awsCredsFile       <- maybeSinkFilePath
    case (awsMasterCredsFile, awsCredsFile) of
        (Nothing, _) ->  print envVarAndFileRequirements
        (_, Nothing) ->  print envVarAndFileRequirements
        (Just sourceFile, Just sinkFile) -> do
                 initted <- isInitialized sourceFile
                 if initted
                    then  putStrLn "aws-profiles has already been initialized"
                    else do
                        errorOrIni <- readIniFile sinkFile
                        case errorOrIni of
                            Left err  -> putStrLn err
                            Right ini -> do
                                writeFile sourceFile ";generated by aws-profile\n"
                                appendFile sourceFile $ unpack $ printIniWith (WriteIniSettings EqualsKeySeparator) ini
                                putStrLn "aws-profiles has been successfully initialized"

                                


setProfile :: [String] -> IO ()
setProfile args =  do
    awsMasterCredsFile <- maybeSourceFilePath
    awsCredsFile       <- maybeSinkFilePath
    case (awsMasterCredsFile, awsCredsFile) of
        (Nothing, _) ->  print envVarAndFileRequirements
        (_, Nothing) ->  print envVarAndFileRequirements
        (Just sourceFile, Just sinkFile) -> do
            initted <- isInitialized sourceFile
            if initted then do
                errorOrIni <- readIniFile sourceFile
                case errorOrIni of
                    Left err  -> putStrLn err
                    Right ini -> do
                        eitherProfileArg <- getEitherProfileArg args ini
                        case eitherProfileArg of
                            Left err -> putStrLn err
                            Right profile -> do
                                let accessKey = lookupValue profile awsAccessKeyId ini
                                let secret =  lookupValue profile awsSecretAccessKey ini
                                case (accessKey, secret) of
                                    (Left err, _) -> print err
                                    (_, Left err) -> print err
                                    (Right a, Right s) -> do
                                        let newIni = Ini {unIni = fromList [("default", fromList [(awsAccessKeyId, a), (awsSecretAccessKey, s)])]}
                                        let settings = WriteIniSettings EqualsKeySeparator
                                        writeFile sinkFile $ currentProfileComment profile
                                        appendFile sinkFile $ unpack $ printIniWith settings newIni
                                        
                                        -- sets output text to green
                                        setSGR [SetColor Foreground Vivid Green]
                                        putStrLn $ "Your AWS profile is set to " ++ unpack profile
                else do
                    setSGR [SetColor Foreground Vivid Red]
                    putStrLn "Please run aws-profiles init first"


parseCommand :: String -> Either String Command          
parseCommand str = case str of
    "init" -> Right Init
    "set"  -> Right Set
    _      -> Left str
    

main :: IO ()
main = do
    -- sets output text to red for errors    
    args <- getArgs
    case args of 
        []   -> do 
            putStrLn "You must specify a command. Supported commands are: init, set"
        x:xs -> do
            setSGR [SetColor Foreground Vivid Green]
            let cmd = parseCommand x
            case cmd of
                Right Init  -> initAwsProfile
                Right Set   -> setProfile xs
                Left str    -> putStrLn $ str ++ " is not a valid command. Supported comands are: init, set"


   