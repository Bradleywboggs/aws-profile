#! /usr/bin/env stack 
--stack --resolver lts-12.21 script --package ini --package directory --package text --package unordered-containers --package directory --package ansi-terminal

{-# LANGUAGE OverloadedStrings #-}

import System.Environment (getArgs, lookupEnv)
import Data.Ini
import Data.Text
import qualified Data.HashMap.Strict as H
import System.Directory
import qualified Data.List as L
import System.Console.ANSI
import Control.Exception

data Command = Init | Set | Show deriving Show
maybeCredsFile :: IO (Maybe FilePath)
maybeCredsFile = lookupEnv "AWS_CREDENTIALS"

awsAccessKeyId :: Text
awsAccessKeyId = "aws_access_key_id"

awsSecretAccessKey :: Text
awsSecretAccessKey = "aws_secret_access_key"

type AWSProfileSetUpError = String
envVarAndFileRequirements :: AWSProfileSetUpError
envVarAndFileRequirements = "You must set the the environment variable:\n" ++
                            "AWS_CREDENTIALS=/absolute/path/to/your/.aws/credentials\n"
type Comment = String

currentProfileComment :: Text -> Comment
currentProfileComment profile = ";aws-profile: " ++ unpack profile ++ "\n\n"

type InvalidProfileError = String

invalidProfileErr :: [String] -> InvalidProfileError
invalidProfileErr validProfiles = "You must include a valid profile name. Your available AWS profiles are: " ++ show validProfiles

getEitherProfileArg :: [String] -> Ini -> IO (Either InvalidProfileError Text)
getEitherProfileArg args ini = do
    let validProfiles = L.filter (/= "default") (fmap unpack (sections ini))
    case args of
        [] -> return $ Left $ invalidProfileErr validProfiles
        x:_ -> if x `L.elem` validProfiles then return $ Right (pack x) else return $ Left $ invalidProfileErr validProfiles

catchExc :: IOException -> IO String
catchExc _ = return []

isInitialized :: FilePath -> IO Bool
isInitialized sourceFile = do
    file <- catch (readFile sourceFile) catchExc
    case file of 
        [] -> return False
        fileData -> if (L.head . L.lines) fileData == ";generated by aws-profile" then return True else return False

type Profile = String
parseComment :: String -> Either String Profile
parseComment comment = case L.words comment of
    [";aws-profile:", profile] -> Right profile
    _                        -> Left "You've not yet selected a profile using aws-profile."


showProfileName :: IO ()
showProfileName = do
    awsCredsFile       <- maybeCredsFile
    case awsCredsFile of
        Nothing -> putStrLn envVarAndFileRequirements
        Just fp -> do
            fileData <- catch (readFile fp) catchExc
            case fileData of
                [] -> putStrLn "You've not yet selected a profile using aws-profile."
                f -> case parseComment $ (L.head . L.lines) f of
                        Left err     -> putStrLn err
                        Right profile -> putStrLn $ "You're current default profile is " ++ profile ++ "."




setProfile :: [String] -> IO ()
setProfile args =  do
    awsCredsFile <- maybeCredsFile
    case  awsCredsFile of
        Nothing           ->  print envVarAndFileRequirements
        Just awsCredsFile -> do
            errorOrIni <- readIniFile awsCredsFile
            case errorOrIni of
                Left err  -> putStrLn err
                Right ini -> do
                    eitherProfileArg <- getEitherProfileArg args ini
                    case eitherProfileArg of
                        Left err -> putStrLn err
                        Right profile -> do
                            let accessKey = lookupValue profile awsAccessKeyId ini
                            let secret =  lookupValue profile awsSecretAccessKey ini
                            case (accessKey, secret) of
                                (Left err, _) -> print err
                                (_, Left err) -> print err
                                (Right a, Right s) -> do
                                    let newIni = Ini {unIni = H.insert "default" (H.fromList [(awsAccessKeyId, a), (awsSecretAccessKey, s)]) (unIni ini)}
                                    let settings = WriteIniSettings EqualsKeySeparator
                                    writeFile awsCredsFile $ currentProfileComment profile
                                    appendFile awsCredsFile $ unpack $ printIniWith settings newIni
                                    
                                    -- sets output text to green
                                    setSGR [SetColor Foreground Vivid Green]
                                    putStrLn $ "Your AWS profile is set to " ++ unpack profile


parseCommand :: String -> Either String Command          
parseCommand str = case str of
    "set"  -> Right Set
    "show" -> Right Show
    _      -> Left str
    

main :: IO ()
main = do
    -- sets output text to red for errors
    setSGR [SetColor Foreground Vivid Red]
    args <- getArgs
    case args of 
        []   -> putStrLn "You must specify a command. Supported commands are: set, show"
        x:xs -> do
            let cmd = parseCommand x
            case cmd of
                Right Set   -> setProfile xs
                Right Show  -> showProfileName
                Left str    -> putStrLn $ str ++ " is not a valid command. Supported comands are: set, show"


   